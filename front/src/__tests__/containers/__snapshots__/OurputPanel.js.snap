// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`containers/OutputPanel/showPOSAndPronunciationState 初期状態からshowSentence, showPOSAndPronunciationとStateが遷移した際に、Componentが正しく配置されている 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <OutputPanel
    dispatch={[Function]}
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }
    storeSubscription={
        Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
            "unsubscribe": [Function],
          }
    }
    word="野球"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "bsClass": "row",
      "children": <Uncontrolled(Panel)>
        <PanelHeading
                bsClass="panel"
                componentClass="div"
        >
                <FormattedMessage
                        id="title.result"
                        values={Object {}}
                />
        </PanelHeading>
        <PanelBody
                messageId="description.result"
        >
                <Connect(Sentence) />
        </PanelBody>
        <InjectIntl(Connect(Information)) />
</Uncontrolled(Panel)>,
      "componentClass": "div",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <PanelHeading
            bsClass="panel"
            componentClass="div"
>
            <FormattedMessage
                        id="title.result"
                        values={Object {}}
            />
</PanelHeading>,
          <PanelBody
            messageId="description.result"
>
            <Connect(Sentence) />
</PanelBody>,
          <InjectIntl(Connect(Information)) />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "panel",
            "children": <FormattedMessage
              id="title.result"
              values={Object {}}
/>,
            "componentClass": "div",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "title.result",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Connect(Sentence) />,
            "messageId": "description.result",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "bsClass": "row",
        "children": <Uncontrolled(Panel)>
          <PanelHeading
                    bsClass="panel"
                    componentClass="div"
          >
                    <FormattedMessage
                              id="title.result"
                              values={Object {}}
                    />
          </PanelHeading>
          <PanelBody
                    messageId="description.result"
          >
                    <Connect(Sentence) />
          </PanelBody>
          <InjectIntl(Connect(Information)) />
</Uncontrolled(Panel)>,
        "componentClass": "div",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <PanelHeading
              bsClass="panel"
              componentClass="div"
>
              <FormattedMessage
                            id="title.result"
                            values={Object {}}
              />
</PanelHeading>,
            <PanelBody
              messageId="description.result"
>
              <Connect(Sentence) />
</PanelBody>,
            <InjectIntl(Connect(Information)) />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "panel",
              "children": <FormattedMessage
                id="title.result"
                values={Object {}}
/>,
              "componentClass": "div",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "id": "title.result",
                "values": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Connect(Sentence) />,
              "messageId": "description.result",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`containers/OutputPanel/showSentenceState 初期状態からshowSentenceへStateが遷移した際に、Componentが正しく配置されている 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <OutputPanel
    dispatch={[Function]}
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }
    storeSubscription={
        Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
            "unsubscribe": [Function],
          }
    }
    word=""
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "bsClass": "row",
      "children": <Uncontrolled(Panel)>
        <PanelHeading
                bsClass="panel"
                componentClass="div"
        >
                <FormattedMessage
                        id="title.result"
                        values={Object {}}
                />
        </PanelHeading>
        <PanelBody
                messageId="description.result"
        >
                <Connect(Sentence) />
        </PanelBody>
</Uncontrolled(Panel)>,
      "componentClass": "div",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <PanelHeading
            bsClass="panel"
            componentClass="div"
>
            <FormattedMessage
                        id="title.result"
                        values={Object {}}
            />
</PanelHeading>,
          <PanelBody
            messageId="description.result"
>
            <Connect(Sentence) />
</PanelBody>,
          undefined,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "panel",
            "children": <FormattedMessage
              id="title.result"
              values={Object {}}
/>,
            "componentClass": "div",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "title.result",
              "values": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Connect(Sentence) />,
            "messageId": "description.result",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        undefined,
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "bsClass": "row",
        "children": <Uncontrolled(Panel)>
          <PanelHeading
                    bsClass="panel"
                    componentClass="div"
          >
                    <FormattedMessage
                              id="title.result"
                              values={Object {}}
                    />
          </PanelHeading>
          <PanelBody
                    messageId="description.result"
          >
                    <Connect(Sentence) />
          </PanelBody>
</Uncontrolled(Panel)>,
        "componentClass": "div",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <PanelHeading
              bsClass="panel"
              componentClass="div"
>
              <FormattedMessage
                            id="title.result"
                            values={Object {}}
              />
</PanelHeading>,
            <PanelBody
              messageId="description.result"
>
              <Connect(Sentence) />
</PanelBody>,
            undefined,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "panel",
              "children": <FormattedMessage
                id="title.result"
                values={Object {}}
/>,
              "componentClass": "div",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "id": "title.result",
                "values": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Connect(Sentence) />,
              "messageId": "description.result",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          undefined,
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
